Модели разработки ПО

1. Waterfall (каскадная) {
  Каждый этап следует друг за другом
  Этапы модели {
    1. Сбор требований;
    2. Анализ;
    3. Дизайн;
    4. Разработка;
    5. Тестирование;
    6. Прод;
    }
    
  Плюсы {
    1. Полное документирование всех этапов разработки;
    2. Чёткое планирование сроков, затрат;
    3. Прозрачность процессов для заказчика;
    }
  Минусы {
    1. До начала работы нужно утвердить полный объём требований к системе, в случае внесения изменений в ТЗ необходимо будет начинать работу с первого этапа;
    2. Увеличение затрат при изменении требований;
    }
}

2. V-model (модифицированная каскадная модель) {
  
  Requirements              Acceptance Test Design              Acceptance
    Analysis    <------------------------------------------->   Testing
        V                                                        A
        System                System Test Design              System
        Design      <----------------------------------->    Testing
           V                                                    A
           Architecture    Integration Test Design      Integration
              Design       <----------------------->    Testing
                     V                                        A
                  Module        Unit Test Design        Unit
                    Design     <---------------->     Testing
                           V                      A
                                    Coding

    Тестирование начинается ещё со стадии написания требований, для каждого следующего этапа определён свой уровень тестового покрытия

    Плюсы {
      1. Строгие этапы;
      2. Ранне тестирование (Планирование тестирования и верификация системы производится на ранних этапах);
      3. Промежуточное тестирование;
    }
    Минусы {
      1. Отсутствие гибкости;
      2. Написание кода только в середине процесса;
      3. Нет динамического внесения изменений
    }
}

3. Итерационная (инкрементальная) модель {
  Состоит из нескольких мини-циклов/итераций, в результате каждого добавляется какая-то функциональность/кусок кода/сервис. В каждую итерацию обычно происходит разработка отдельного компонента
  
  Initial Planning > loop (Planning > Requirements > Analisys & Design > Implementation > Testing Evaluation) > Deployment

    Плюсы {
      1. Раннее появление рабочего билда > раннее тестирование функционала;
      2. Гибкость;
      3. 
    }
    Минусы {
      1. Каждая итерация - отдельный этап, друг на друга они не накладываются;
      2. Не все требования известны на начало проектирования ПО;
    }
}

4. Agile (Scrum) {
  Agile = манифест;
  Scrum = фреймворк;

  Agile-принципы {
    1. Люди и взаимодействие важнее процессов инструментов;
    2. Работающий продукт важнее исчерпывающей документации;
    3. Сотрудничество с заказчиком важнее согласования условий контракта;
    4. Готовность к изменениям важнее следования первоначальному плану;
  }

  Scrum {
    Команда {
      1. Product owner (описание и контроль бэклога продукта);
      2. Development team (самоорганизация - кроссфункциональность - единственная роль = разработчик - коллективная ответственность);
      3. Scrum master (ответственный за функционирование команды - обучение и отношения внутри команды);
    }

    События (спринт) {
      1. Планирование спринта;
      2. Ежедневный scrum;
      3. Обзор спринта;
      4. Ретроспектива;
    }

    Артефакты {
      1. Бэклог продукта;
      2. Уточнение бэклога продукта;
      3. Критерии подготовленности;
      4. User-stories;
      5. Покер планирования;
      6. Бэклог спринта;
      7. Инкремент продукта;
      8. Критерии готовности;
    }

    Метрики {
      1. Velocity (средння скорость выполнения стори-поинтов за спринт);
      2. Capacity ();
      3. Диаграмма выгорания задач;
      4. Накопительная диаграмма потока;
    }
  }
}
